class Utility
{
    private static Random _random = new Random();

    public static void PressAnythingToContinue(ConsoleColor color = ConsoleColor.DarkYellow, bool isCustomPosition = false, int xPosition = 0, int yPosition = 0, string text = "press anything to continue", bool isConsoleClear = true)
    {
        if (isCustomPosition)
            Console.SetCursorPosition(xPosition, yPosition);

        Console.ForegroundColor = color;
        Console.WriteLine(text);
        Console.ResetColor();
        Console.ReadKey(true);

        if (isConsoleClear)
            Console.Clear();
    }

    public static int GenerateRandomNumber(int maxValue, int minValue = 1)
    {

        return _random.Next(minValue, maxValue);
    }

    public static int GetUserNumberInRange(string startMessage = "Select Number: ", int maxInput = 100)
    {
        int userInput = 0;
        bool isValidInput = false;

        Console.Write(startMessage);

        while (isValidInput == false)
        {
            if (int.TryParse(Console.ReadLine(), out userInput))
            {
                if (userInput > 0 && userInput <= maxInput)
                    isValidInput = true;
                else
                    Utility.WriteColored($"\nPlease enter a number between 1 and {maxInput}: ", ConsoleColor.Red);
            }
            else
            {
                Utility.WriteColored("\nInvalid input. Please enter a number instead: ", ConsoleColor.Red);
            }
        }

        return userInput;
    }

    public static void WriteLineColored(string text, ConsoleColor color = ConsoleColor.DarkRed, bool isCustomPosition = false, int xPosition = 0, int yPosition = 0)
    {
        Console.ForegroundColor = color;

        if (isCustomPosition)
            WriteLine(xPosition, yPosition, text);
        else
            Console.WriteLine(text);

        Console.ResetColor();
    }

    public static void WriteColored(string text, ConsoleColor color = ConsoleColor.DarkRed, bool isCustomPosition = false, int xPosition = 0, int yPosition = 0)
    {
        Console.ForegroundColor = color;

        if (isCustomPosition)
            Write(xPosition, yPosition, text);
        else
            Console.Write(text);

        Console.ResetColor();
    }

    public static void WriteLine(int xPosition, int yPosition, string text)
    {
        Console.SetCursorPosition(xPosition, yPosition);
        Console.WriteLine(text);
    }

    public static void Write(int xPosition, int yPos, string text)
    {
        Console.SetCursorPosition(xPosition, yPos);
        Console.Write(text);
    }
}

static void #ShowTitleScreen(string developer, string game, int startXDev = 47, int startXGame = 47)
        {
            int startY = 14;
            int timingDev = 1600;
            int timingGame = 2000;

            WriteIn(developer, startXDev, startY, true, timingDev, false, ConsoleColor.White);
            WriteIn(game, startXGame, startY, true, timingGame);
        }

        static void #DrawHoverChar(int menuStartX, int menuStartY, bool isVisible = true, ConsoleColor color = ConsoleColor.DarkGreen)
        {
            char hoverChar = 'â™¦';
            if (menuStartX > 1)
            {
                Console.SetCursorPosition(menuStartX - 2, menuStartY);

                if (isVisible == true)
                {
                    ColorizeText(hoverChar, color);
                }
                else
                {
                    Console.Write(" ");
                }
            }
        } //menu CHAR

        static void #DrawMenu(List<string> options, int selectedOption, int menuStartX = 55, int menuStartY = 14)
        {
            for (int i = 0; i < options.Count; i++)
            {
                if (selectedOption == i)
                {
                    WriteIn($" {options[i]} ", menuStartX, menuStartY + i, false, 0, true);
                    DrawHoverChar(menuStartX, menuStartY + i, true);
                }
                else
                {
                    WriteIn($" {options[i]} ", menuStartX, menuStartY + i, false, 0, false);
                    DrawHoverChar(menuStartX, menuStartY + i, false);
                }
            }
        }  //menu DRAW

        static void #SelectOption(List<string> options, out int selectedOption, int menuStartX = 55, int menuStartY = 14)
        {
            ConsoleKeyInfo pressedButton;
            bool isOptionSelected = false;
            Console.CursorVisible = false;
            selectedOption = 0;

            while (!isOptionSelected)
            {
                DrawMenu(options, selectedOption, menuStartX, menuStartY);
                pressedButton = Console.ReadKey();

                switch (pressedButton.Key)
                {
                    case ConsoleKey.UpArrow:
                    case ConsoleKey.W:
                        if (options.Count > 0)
                        {
                            if (selectedOption != 0)
                            {
                                selectedOption--;
                            }
                            else
                            {
                                selectedOption = options.Count - 1;
                            }
                        }
                        break;

                    case ConsoleKey.DownArrow:
                    case ConsoleKey.S:
                        if (options.Count > 0)
                        {
                            if (selectedOption != options.Count - 1)
                            {
                                selectedOption++;
                            }
                            else
                            {
                                selectedOption = 0;
                            }
                        }
                        break;

                    case ConsoleKey.Enter:
                    case ConsoleKey.Spacebar:
                        isOptionSelected = true;
                        Console.Clear();
                        break;
                }
            }

            Console.CursorVisible = true;
        } //menu DRAW AND INPUT

        static void #Notify(string title, string buttonText, int menuStartX = 2, int menuStartY = 1, ConsoleColor color = ConsoleColor.Gray, bool displayTitle = true)
        {
            ConsoleKeyInfo pressedButton;
            bool isOptionSelected = false;
            Console.CursorVisible = false;

            if (displayTitle)
            {
                Console.SetCursorPosition(menuStartX, menuStartY);
                ColorizeText($"{title}", color);
            }

            WriteIn($" {buttonText} ", menuStartX + 1, menuStartY + 2, false, 0, true, ConsoleColor.Blue);

            while (!isOptionSelected)
            {
                pressedButton = Console.ReadKey();

                switch (pressedButton.Key)
                {
                    case ConsoleKey.Enter:
                    case ConsoleKey.Spacebar:
                        isOptionSelected = true;
                        break;
                }
            }

            Console.Clear();
        }

        static void #EnterTextGUI(out string userInput, string title, string buttonText = "Confirm", int menuStartX = 0, int menuStartY = 2)
        {
            Console.Clear();
            Console.WriteLine(title);
            WriteIn($" {buttonText} ", menuStartX, menuStartY + 1, false, 0, true, ConsoleColor.Blue); //confirm button
            WriteIn($"              ", menuStartX, menuStartY - 1, false, 0, true, ConsoleColor.DarkGray); //text field
            Console.BackgroundColor = ConsoleColor.DarkGray;
            Console.SetCursorPosition(menuStartX, menuStartY - 1);
            userInput = Console.ReadLine();
            Console.BackgroundColor = default;
            Console.Clear();
        }

        static void #WriteInFor(string text, int xPosition = 47, int yPosition = 14, int duration = 1600, bool isSelected = false, ConsoleColor selectionColor = ConsoleColor.White)
        {
            Console.CursorVisible = false;
            ConsoleHelper.SetCurrentFont("Unispace", 28);
            ClearInput(xPosition, yPosition, text.Length);
            Console.SetCursorPosition(xPosition, yPosition);

            if (isSelected)
            {
                Console.BackgroundColor = selectionColor;
                Console.WriteLine(text);
            }
            else
            {
                Console.ForegroundColor = selectionColor;
                Console.WriteLine(text);
            }

            Console.BackgroundColor = default;
            Console.ForegroundColor = ConsoleColor.White;

            if (duration > 0)
            {
                Thread.Sleep(duration);
                ClearInput(xPosition, yPosition, text.Length);
            }

            Console.CursorVisible = true;
            Console.SetCursorPosition(0, 0);
        } //write TEXT

        static void #ClearInput(int xPos = 0, int yPos = 0, int length = 0)
        {
            Console.SetCursorPosition(xPos, yPos);

            for (int i = 0; i < length; i++)
                Console.Write(" ");
        } //clear

        public static class #ConsoleHelper
        {
            private const int FixedWidthTrueType = 54;
            private const int StandardOutputHandle = -11;

            [DllImport("kernel32.dll", SetLastError = true)]
            internal static extern IntPtr GetStdHandle(int nStdHandle);

            [return: MarshalAs(UnmanagedType.Bool)]
            [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
            internal static extern bool SetCurrentConsoleFontEx(IntPtr hConsoleOutput, bool MaximumWindow, ref FontInfo ConsoleCurrentFontEx);

            [return: MarshalAs(UnmanagedType.Bool)]
            [DllImport("kernel32.dll", SetLastError = true, CharSet = CharSet.Unicode)]
            internal static extern bool GetCurrentConsoleFontEx(IntPtr hConsoleOutput, bool MaximumWindow, ref FontInfo ConsoleCurrentFontEx);


            private static readonly IntPtr ConsoleOutputHandle = GetStdHandle(StandardOutputHandle);

            [StructLayout(LayoutKind.Sequential, CharSet = CharSet.Unicode)]
            public struct FontInfo
            {
                internal int cbSize;
                internal int FontIndex;
                internal short FontWidth;
                public short FontSize;
                public int FontFamily;
                public int FontWeight;
                [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)]
                //[MarshalAs(UnmanagedType.ByValArray, ArraySubType = UnmanagedType.wc, SizeConst = 32)]
                public string FontName;
            }

            public static FontInfo[] SetCurrentFont(string font, short fontSize = 0)
            {
                //Console.WriteLine("Set Current Font: " + font);

                FontInfo before = new FontInfo
                {
                    cbSize = Marshal.SizeOf<FontInfo>()
                };

                if (GetCurrentConsoleFontEx(ConsoleOutputHandle, false, ref before))
                {

                    FontInfo set = new FontInfo
                    {
                        cbSize = Marshal.SizeOf<FontInfo>(),
                        FontIndex = 0,
                        FontFamily = FixedWidthTrueType,
                        FontName = font,
                        FontWeight = 400,
                        FontSize = fontSize > 0 ? fontSize : before.FontSize
                    };

                    // Get some settings from current font.
                    if (!SetCurrentConsoleFontEx(ConsoleOutputHandle, false, ref set))
                    {
                        var ex = Marshal.GetLastWin32Error();
                        Console.WriteLine("Set error " + ex);
                        throw new System.ComponentModel.Win32Exception(ex);
                    }

                    FontInfo after = new FontInfo
                    {
                        cbSize = Marshal.SizeOf<FontInfo>()
                    };
                    GetCurrentConsoleFontEx(ConsoleOutputHandle, false, ref after);

                    return new[] { before, set, after };
                }
                else
                {
                    var er = Marshal.GetLastWin32Error();
                    Console.WriteLine("Get error " + er);
                    throw new System.ComponentModel.Win32Exception(er);
                }
            }
        } //font and font size
