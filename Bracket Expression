//Дана строка из символов '(' и ')'.
//Определить, является ли она корректным скобочным выражением. Определить максимальную глубину вложенности скобок.
//Текущая глубина равняется разности открывающихся и закрывающихся скобок в момент подсчета каждого символа.
//К символу в строке можно обратиться по индексу
//Пример “(()(()))” - строка корректная и максимум глубины равняется 3.
//Пример некорректных строк: "(()", "())", ")(", "(()))(()"
//(((()(()())))) - 5
//(((()(())))) - 5
//(()((()))) - 4
//)()(())( - 2

using System;

namespace millionDollarsCourses
{
    internal class Program
    {
        static void Main()
        {
            string bracketExpression = null;

            char openBracketChar = '(';
            char closeBracketChar = ')';

            int countOpenBracket;
            int countCloseBracket;

            int depthCurrentExpression;
            int maxDepth;

            bool isCorrectBracket;
            bool isIncorrectExpressionForSure;

            bool isInsideExpression;
            bool isInnerExpressionGotClosed;
            int newExpression;

            while (true)
            {
                countOpenBracket = 0;
                countCloseBracket = 0;

                depthCurrentExpression = 0;
                maxDepth = 0;

                isCorrectBracket = false;

                isIncorrectExpressionForSure = false;
                isInsideExpression = false;
                newExpression = 0;
                isInnerExpressionGotClosed = false;

                Console.Write("\nInput bracket expression: ");
                bracketExpression = Console.ReadLine();

                #region check bracket
                for (int i = 0; i < bracketExpression.Length; i++)
                {
                    #region count brackets
                    if (bracketExpression[i] == openBracketChar)
                    {
                        countOpenBracket++;

                        if (countOpenBracket > countCloseBracket)
                        {
                            isInsideExpression = true;
                        }
                        else
                        {
                            isInsideExpression = false;
                        }

                        if (depthCurrentExpression > 0)
                        {
                            depthCurrentExpression--;

                            if (depthCurrentExpression > maxDepth)
                                maxDepth = depthCurrentExpression;
                        }
                    }
                    else if (bracketExpression[i] == closeBracketChar)
                    {
                        countCloseBracket++;

                        if (countCloseBracket > countOpenBracket)
                        {
                            countCloseBracket = 0;
                            isIncorrectExpressionForSure = true;
                        }
                    }
                    #endregion

                    #region check depth and correctness
                    if (countOpenBracket > 0 && countCloseBracket > 0 && isInsideExpression == true)
                    {
                        depthCurrentExpression++;

                        countCloseBracket--;
                        countOpenBracket--;

                        if (countCloseBracket == 0 && countOpenBracket == 0)
                        {
                            isInsideExpression = false;
                        }

                        if (isInsideExpression == false)
                        {
                            if (depthCurrentExpression > maxDepth)
                                maxDepth = depthCurrentExpression;

                            depthCurrentExpression = 0;
                        }
                    }
                    #endregion
                }

                if (depthCurrentExpression > maxDepth)
                {
                    maxDepth = depthCurrentExpression;
                }

                if (countOpenBracket == 0 && countCloseBracket == 0 && isIncorrectExpressionForSure != true)
                {
                    isCorrectBracket = true;
                }
                #endregion

                #region output result
                if (isCorrectBracket)
                    Console.WriteLine($"{bracketExpression} - This bracket is .... correct! Max depth: {maxDepth}.");
                else
                    Console.WriteLine($"{bracketExpression} - This bracket is .... incorrect! Max depth: {maxDepth}.");
                #endregion
            }
        }
    }
}
